name: Deploy Lambda

on:
  push:
    branches:
      - '*'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
  TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
  AWS_DEFAULT_REGION: us-east-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup AWS CLI
      working-directory: terraform
      run: terraform init -backend-config="bucket=${TF_STATE_BUCKET}" -backend-config="key=lambda.tfstate" -backend-config="region=us-east-1"
    
    - name: Terraform Plans
      working-directory: terraform
      run: terraform plan -out=tfplan
    
    - name: Apply Terraform
      working-directory: terraform
      run: terraform apply -input=false -auto-approve tfplan
    
  aws_cli_:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup AWS CLI
      working-directory: lambda
      run: npm install aws-sdk && npm install

    - name: Zip Lambda function
      run: zip -r lambda.zip lambda/
    
    - name: Verify if the zip file exists
      run: test -f lambda.zip && echo "Found file" || echo "Not found file"
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1
    
    - name: Upload to S3 (replace existing lambda.zip)
      run: aws s3 cp lambda.zip s3://${TF_STATE_BUCKET}/lambda.zip --acl bucket-owner-full-control

    - name: Update Lambda function code
      run: |
        aws lambda update-function-code \
        --function-name application_entry \
        --s3-bucket ${TF_STATE_BUCKET} \
        --s3-key lambda.zip \
    
    - name: Wait for Lambda to be ready
      run: |
        while true; do
          STATUS=$(aws lambda get-function --function-name application_entry --query 'Configuration.LastUpdateStatus' --output text)
          echo "Current status: $STATUS"
          if [ "$STATUS" != "InProgress" ]; then
            break
          fi
          echo "Waiting for the function to be ready..."
          sleep 10
        done

    - name: Update Lambda Environment Configuration
      run: |
        VARIABLES=$(jq -n \
          --arg COGNITO_CLIENT_ID "${{ secrets.COGNITO_CLIENT_ID }}" \
          --arg COGNITO_DOMAIN "${{ secrets.COGNITO_DOMAIN }}" \
          --arg COGNITO_REDIRECT_URI "${{ secrets.COGNITO_REDIRECT_URI }}" \
          --arg COGNITO_USER_POOL_ID "${{ secrets.COGNITO_USER_POOL_ID }}" \
          '{Variables: {COGNITO_CLIENT_ID: $COGNITO_CLIENT_ID, COGNITO_DOMAIN: $COGNITO_DOMAIN, COGNITO_REDIRECT_URI: $COGNITO_REDIRECT_URI, COGNITO_USER_POOL_ID: $COGNITO_USER_POOL_ID}}')
        aws lambda update-function-configuration \
        --function-name application_entry \
        --environment "$VARIABLES"
          